name: Build Image

on:
  # push:
  #   # Publish `master` as Docker `latest` image.
  #   branches:
  #     - master

  #   # Publish `v1.2.3` tags as releases.
  #   tags:
  #     - v*

  workflow_dispatch:
    inputs:
      deployTarget:
        description: 'Deploy to production with target'
        required: true
        default: 'main'

env:
  IMAGE_NAME: vexere-backend

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.deployTarget }}

      - name: Build image
        run: DOCKER_BUILDKIT=1 docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
        working-directory: backend

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Docker image to EC2 instance
        run: scp -o StrictHostKeyChecking=no -r ./docker-compose.prod.yml admin@${{ secrets.EC2_HOST }}:/home/admin/docker-compose.yml
        working-directory: backend

      - name: SSH into EC2 instance and deploy
        run: ssh -o StrictHostKeyChecking=no admin@${{ secrets.EC2_HOST }} "sudo docker pull ghcr.io/${{ github.repository_owner }}/vexere-backend && sudo docker-compose up -d"
        working-directory: backend
